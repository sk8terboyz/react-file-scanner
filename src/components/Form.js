import './Form.css'

const Form = ({ setFileData, setIndexData, setSearchWords, setShowModal, setModalBody, setProgress}) => {

    const submitHandler = (e) => {
        e.preventDefault();
        setProgress(10);
        let searchWords = e.target[1].value;
        // let filePath = e.target[7].value;
        // hardcode filepath while developing
        // const filePath = './readableFiles/test.txt';
        const filePath = './readableFiles/autogenerated.txt';
        // const filePath = './readableFiles/test.json';
        // console.log(e);

        if(searchWords && filePath) {
            // when no search option is chosen
            if(!e.target[2].checked && !e.target[3].checked) {
                // display modal
                setModalBody("Please select which search option you wish to scan the file for.")
                setShowModal(true);
                return;
            }
            // when file type isn't specified 
            if((e.target[5].checked && e.target[6].checked) || (!e.target[5].checked && !e.target[6].checked)) {
                // display modal
                setModalBody("Please choose the file type of the file to be scanned.")
                setShowModal(true);
                return;
            }

            let searchText = separateSearchText(searchWords, "~");
            console.log(`Searching for '${searchText}' in ${filePath}`);
            
            setSearchWords(searchText);
            // Scan For Letters
            if(e.target[2].checked) {
                searchText.forEach(text => {
                    if(text.length > 1) {
                        setModalBody("Entering a word and searching for characters makes the app run slower. You have been warned.")
                        setShowModal(true);
                    }
                })
                readFile(filePath, searchText, false);
                return;
            }
            // Scan For Words
            if(e.target[3].checked) {
                readFile(filePath, searchText, true);
                return;
            }
        }
        // When file or searching words are not found
        // display modal
        setModalBody("Please input text to search for in the file.")
        setShowModal(true);
    }

    const separateSearchText = (text, delim) => {
        const sText = text.split(delim);
        const lower = sText.map(ele => {
            return ele.toLowerCase();
        })
        return lower;
    }

    const readFile = (file, searchTxt, searchingForWords) => {
        console.log(`Reading file...`);
        fetch(file)
        .then(res => res.text())
        .then(data => { getIndices(data.toLowerCase(), searchTxt, searchingForWords)})
        .catch(err => { console.error(err) })
    }

    const getIndices = (content, searchText, searchingForWords) => {
        let index = 0;
        let fileContent = [];
        setProgress(20);
        if(searchingForWords) {
            fileContent = splitByWord(content);
        } else {
            fileContent = splitByLetter(content);
        }
        let indexArray = [];
        // double for loop has O(n^2) time (could be reduced but I'm not sure if a hash map is a good idea here )
        setProgress(30);
        fileContent.forEach(word => {
            // setProgress((index/fileContent.length).toFixed(2)*100);
            searchText.forEach(searcher => {
                if(word === searcher) {
                    // store the index where each text is found
                    indexArray.push(index);
                }
            })
            index++;
        });
        setProgress(80)
        // console.log(`iterations: ${iterations/index} \nwords: ${index} \nmatches: ${indexArray.length}`);
        // set index data and file data
        setFileData(fileContent);
        setIndexData(indexArray);
        setProgress(0);
        return;
    }

    // replace newline and special characters from file text & split text at each space
    // removes all punctuation except the apostrophe (')
    const splitByWord = (content) => {
        let fixed = content.replace(/\r?\n|\r/g, "").replace(/[.,/#!$%^&*;:{}=-_`"~()]/g, "");
        return fixed.split(" ");
    }

    const splitByLetter = (content) => {
        let split = splitByWord(content);
        let chars = [];
        split.forEach(word => {
            for (let i = 0; i < word.length; i++) {
                chars.push(word.charAt(i));
            }
        });
        return chars;
    }

    return (
        <form className='fileForm' onSubmit={submitHandler}>
            <fieldset>
                <div className='form-group'>
                    <label for="textArea" className='form-label mt-4 explanation'>Enter text to search for:</label>
                    {/* <p className='text-primary disclaimer'><a className='searchMoreInfo' onClick={searchTextInfo}>More Info</a></p> */}
                    <textarea className='form-control' id='textArea' rows="2"></textarea>
                </div>
                <legend className='mt-4'>Search Options</legend>
                {/* <p className='text-info searchDisclaimer'>Only Words Currently</p> */}
                <div className='form-check disabled'>
                    <label className='form-check-label'>
                        <input type="radio" className='form-check-input' name="optionsRadios" id="optionsRadios1" value="option1"/>
                        Search for Letters
                    </label>
                </div>
                <div className='form-check'>
                    <label className='form-check-label'>
                        <input type="radio" className='form-check-input' name="optionsRadios" id="optionsRadios2" value="option2" />
                        Search for Words
                    </label>
                </div>
                <fieldset>
                    <legend className='mt-4'>File Type</legend>
                    <p className='text-info'>Current Loaded File Type: .txt</p>
                    <div className='form-check form-switch'>
                        <label className='form-check-label' for="txtFlexSwitch">
                        <input className='form-check-input' type="checkbox" id="txtFlexSwitch" />
                        .txt
                        </label>
                    </div>
                    <div className='form-check form-switch'>
                        <label className='form-check-label' for="jsonFlexSwitch">
                        <input className='form-check-input' type="checkbox" id="jsonFlexSwitch" />
                        .json
                        </label>
                    </div>
                </fieldset>
                <div className='form-group'>
                    <legend className='mt-4'>Upload File</legend>
                    <p className='text-danger disclaimer'>Currently Cannot Read Uploaded Files</p>
                    <input className='form-control' type="file" id='formFile' accept='.txt, .json'/>
                </div>
                <div className='submissionContainer'>
                    <label for="submitBtn" className='form-label text-primary mt-4'>Submit After All Options Selected</label>
                    <br />
                </div>
                <input type="submit" className='submission' id="submitBtn" value="Scan" />
            </fieldset>
        </form>
    )
}

export default Form;